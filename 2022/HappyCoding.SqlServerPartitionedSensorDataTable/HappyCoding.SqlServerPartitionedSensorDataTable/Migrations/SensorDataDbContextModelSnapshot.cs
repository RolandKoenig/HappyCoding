// <auto-generated />
using System;
using HappyCoding.SqlServerPartitionedSensorDataTable;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HappyCoding.SqlServerPartitionedSensorDataTable.Migrations
{
    [DbContext(typeof(SensorDataDbContext))]
    partial class SensorDataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HappyCoding.SqlServerPartitionedSensorDataTable.SensorData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("SensorValue")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ID"), false);

                    b.HasIndex(new[] { "Timestamp" }, "IX_TIMESTAMP");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Timestamp" }, "IX_TIMESTAMP"));

                    b.ToTable("SensorData", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
